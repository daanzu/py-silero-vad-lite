name: Build and upload to PyPI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  release:
    types:
      - published

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # macos-13 is an intel runner, macos-14 is apple silicon
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21.1
        env:
          # Configure cibuildwheel to build native archs only (64-bit), because of limited onnxruntime library support
          CIBW_ARCHS: native
          # Instead of cross-compiling, we build the native archs on each of the two macos runners above
          # CIBW_ARCHS_MACOS: x86_64 arm64
          # Onnxruntime has a minimum target of 11.0, so we must match that
          MACOSX_DEPLOYMENT_TARGET: 11.0
          # Avoid wheel "is not a supported wheel on this platform" errors on macos-13 runner, due to MacOS 11+ misreporting its version
          # Related? https://github.com/pypa/cibuildwheel/issues/1767
          SYSTEM_VERSION_COMPAT: 0
          # Skip building wheels for musllinux, because of limited onnxruntime library support
          CIBW_SKIP: '*-musllinux_*'
          CIBW_TEST_COMMAND: pytest {package}/tests
          CIBW_TEST_EXTRAS: dev

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # environment: pypi
    permissions:
      id-token: write
    # Upload to PyPI on a release that is marked as published
    # if: github.event_name == 'release' && github.event.action == 'published'
    # Or, alternatively, upload to PyPI on every tag starting with 'v' (remove on: release above to use this)
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    # Or, either of the above
    if: (github.event_name == 'release' && github.event.action == 'published') || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
    steps:
      - uses: actions/download-artifact@v4
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - uses: pypa/gh-action-pypi-publish@release/v1
        # with:
        #   repository-url: https://test.pypi.org/legacy/
